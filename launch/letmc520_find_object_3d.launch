<launch>
    <arg name="camera" default="letmc520" />

    <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->

    <arg name="tf_prefix" default="" />
    <arg name="rgb_frame_id"   if="$(eval arg('tf_prefix') == '')" default="$(arg camera)_rgb_optical_frame" />
    <arg name="depth_frame_id" if="$(eval arg('tf_prefix') == '')" default="$(arg camera)_depth_optical_frame" />
    <arg name="rgb_frame_id"   unless="$(eval arg('tf_prefix') == '')" default="$(arg tf_prefix)/$(arg camera)_rgb_optical_frame" />
    <arg name="depth_frame_id" unless="$(eval arg('tf_prefix') == '')" default="$(arg tf_prefix)/$(arg camera)_depth_optical_frame" />

    <!-- device_id can have the following formats:
            "#n"            : the nth device found, starts from 1
            "2@n"           : the nth device on USB bus 2, n starts from 1
            "2bc5/0401@1/6" : uri in format <vendor ID>/<product ID>@<bus number>/<device number>
            "15120410023"   : serial number -->
    <arg name="device_id" default="#1" />
    <arg name="bootorder" default="0" />
    <arg name="devnums" default="1" />

    <!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml,
        where ${NAME} is of the form "[rgb|depth]_[serial#]", e.g. "depth_B00367707227042B".
        See camera_info_manager docs for calibration URL details. -->
    <arg name="rgb_camera_info_url"   default="file://$(find astra_camera)/camera_info/letmc520_rgb.yaml" />
    <arg name="depth_camera_info_url" default="file://$(find astra_camera)/camera_info/letmc520_depth.yaml" />

    <!-- Hardware depth registration -->
    <arg name="depth_registration" default="true" />

    <!-- Driver parameters -->
    <arg name="color_depth_synchronization"     default="false" />
    <arg name="auto_exposure"                   default="true" />
    <arg name="auto_white_balance"              default="true" />

    <!-- Arguments for remapping all device namespaces -->
    <arg name="rgb"              default="rgb" />
    <arg name="ir"               default="ir" />
    <arg name="depth"            default="depth" />

    <!-- Optionally suppress loading the driver nodelet and/or publishing the default tf
       tree. Useful if you are playing back recorded raw data from a bag, or are
       supplying a more accurate tf tree from calibration. -->
    <arg name="load_driver" default="true" />
    <arg name="publish_tf" default="true" />
    <!-- Processing Modules -->
    <arg name="rgb_processing"                  default="true"  />
    <arg name="debayer_processing"              default="false" />
    <arg name="ir_processing"                   default="false" />
    <arg name="depth_processing"                default="true" />
    <arg name="depth_registered_processing"     default="true" />
    <arg name="disparity_processing"            default="false" />
    <arg name="disparity_registered_processing" default="false" />
    <arg name="hw_registered_processing"        default="true" if="$(arg depth_registration)" />
    <arg name="sw_registered_processing"        default="false" if="$(arg depth_registration)" />
    <arg name="hw_registered_processing"        default="false" unless="$(arg depth_registration)" />
    <arg name="sw_registered_processing"        default="true" unless="$(arg depth_registration)" />

    <!-- Disable bond topics by default -->
    <arg name="respawn" default="false" />

    <!-- Worker threads for the nodelet manager -->
    <arg name="num_worker_threads" default="4" />
    <arg name="index" default="0" />

    <!-- Push down all topics/nodelets into "camera" namespace -->
    <group ns="$(arg camera)">

        <!-- for VENDOR ID 2bc5 : PRODUCT ID 0501 = Video4Linux/UVC RGB webcam -->
        <!-- <node pkg="astra_camera" type="camera_node" name="$(arg camera)_rgb"> -->
        <node pkg="astra_camera" type="camera_node" name="rgb">
            <!-- Parameters used to find the camera -->
            <param name="vendor" value="0x2bc5"/>
            <param name="product" value="0x0502"/>
            <param name="serial" value="0"/>
            <!-- If the above parameters aren't unique, choose the first match: -->
            <param name="index" value="$(arg index)"/>

            <!-- Image size and type -->
            <param name="width" value="640"/>
            <param name="height" value="480"/>
            <!-- choose whichever uncompressed format the camera supports: -->
            <param name="video_mode" value="yuyv"/> <!-- or yuyv/nv12/jpeg -->
            <param name="frame_rate" value="30"/>

            <param name="timestamp_method" value="start"/> <!-- start of frame -->
            <param name="camera_info_url" value="$(arg rgb_camera_info_url)"/>

            <!-- <param name="auto_exposure" value="3"/> --> <!-- use aperture_priority auto exposure -->
            <!-- <param name="auto_white_balance" value="false"/> -->
            <remap from="/$(arg camera)/image_raw" to="/$(arg camera)/rgb/image_raw" />
        </node>
	  
        <!-- Start nodelet manager -->
	    <!-- <arg name="manager" value="$(arg camera)_nodelet_manager" /> -->
        <arg name="manager" value="nodelet_manager" />
	    <arg name="debug" default="false" /> <!-- Run manager in GDB? -->
	    
        <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
	        <arg name="name" value="$(arg manager)" />
	        <arg name="debug" value="$(arg debug)" />
	        <arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
	    </include>

        <!-- for VENDOR ID 2bc5 : PRODUCT ID 0403 = OpenNI2 depth camera-->
        <!-- Load driver -->
        <include if="$(arg load_driver)"
	        file="$(find astra_camera)/launch/includes/device.launch.xml">
            <arg name="manager"                         value="$(arg manager)" />
            <arg name="device_id"                       value="$(arg device_id)" />
            <arg name="bootorder"                       value="$(arg bootorder)" />
            <arg name="devnums"                         value="$(arg devnums)" />
            <arg name="rgb_frame_id"                    value="$(arg rgb_frame_id)" />
            <arg name="depth_frame_id"                  value="$(arg depth_frame_id)" />
            <arg name="rgb_camera_info_url"             value="$(arg rgb_camera_info_url)" />
            <arg name="depth_camera_info_url"           value="$(arg depth_camera_info_url)" />
            <arg name="rgb"                             value="$(arg rgb)" />
            <arg name="ir"                              value="$(arg ir)" />
            <arg name="depth"                           value="$(arg depth)" />
            <arg name="respawn"                         value="$(arg respawn)" />
            <arg name="depth_registration"              value="$(arg depth_registration)" />
            <arg name="color_depth_synchronization"     value="$(arg color_depth_synchronization)" />
            <arg name="auto_exposure"                   value="$(arg auto_exposure)" />
            <arg name="auto_white_balance"              value="$(arg auto_white_balance)" />
        </include>

        <!-- For PCL -->
        <!-- Load standard constellation of processing nodelets -->
        <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
            <arg name="manager"                         value="$(arg manager)" />
            <arg name="rgb"                             value="$(arg rgb)" />
            <arg name="ir"                              value="$(arg ir)" />
            <arg name="depth"                           value="$(arg depth)" />
            <arg name="respawn"                         value="$(arg respawn)" />
            <arg name="rgb_processing"                  value="$(arg rgb_processing)" />
            <arg name="debayer_processing"              value="$(arg debayer_processing)" />
            <arg name="ir_processing"                   value="$(arg ir_processing)" />
            <arg name="depth_processing"                value="$(arg depth_processing)" />
            <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)" />
            <arg name="disparity_processing"            value="$(arg disparity_processing)" />
            <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)" />
            <arg name="hw_registered_processing"        value="$(arg hw_registered_processing)" />
            <arg name="sw_registered_processing"        value="$(arg sw_registered_processing)" />
        </include>

    </group>

    <node name="find_object_3d" pkg="find_object_2d" type="find_object_2d" output="screen">
		<param name="gui" value="true" type="bool"/>
	    <param name="settings_path" value="~/.ros/find_object_2d.ini" type="str"/>
	    <param name="subscribe_depth" value="true" type="bool"/>
        <param name="objects_path" value="" type="str"/>
	    <param name="object_prefix" value="tf" type="str"/>
		
		<remap from="rgb/image_rect_color" to="$(arg camera)/rgb/image_raw"/>
	    <remap from="depth_registered/image_raw" to="$(arg camera)/depth_registered/image_raw"/>
	    <remap from="depth_registered/camera_info" to="$(arg camera)/depth_registered/camera_info"/>
    </node>
	
	<!-- Example of tf synchronisation with the objectsStamped message -->
	<node name="tf_example" pkg="find_object_2d" type="tf_example" output="screen">
	    <param name="map_frame_id" value="/map" type="string"/>
		<param name="object_prefix" value="object" type="str"/>
	</node>
	
    <!-- fake some tf frames for the example /map -> /odom -> /base_link -> /camera_link -->

    <arg name="pi/2" value="1.5707963267948966" />
    <arg name="optical_rotate" value="0 0 0 -$(arg pi/2) 0 -$(arg pi/2)" />
        
    <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg camera)_base_link3"
        args="$(arg optical_rotate) $(arg tf_prefix)/$(arg camera)_rgb_frame $(arg tf_prefix)/$(arg camera)_rgb_optical_frame" />  
    <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg camera)_base_link2"
        args="$(arg optical_rotate) $(arg tf_prefix)/$(arg camera)_depth_frame $(arg tf_prefix)/$(arg camera)_depth_optical_frame" />  
    <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg camera)_base_link1"
        args="0 -0.045 0 0 0 0 $(arg tf_prefix)/$(arg camera)_link $(arg tf_prefix)/$(arg camera)_rgb_frame" />  
    <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg camera)_base_link"
        args="0 -0.02  0 0 0 0 $(arg tf_prefix)/$(arg camera)_link $(arg tf_prefix)/$(arg camera)_depth_frame" />

    <node pkg="tf" type="static_transform_publisher" name="base_to_$(arg camera)_tf" 
		args="0.1 0.0 0.3 0.0 0.0 0.0 /base_link /$(arg camera)_link 100" />
	<node pkg="tf" type="static_transform_publisher" name="odom_to_base_tf" 
	    args="1.0 0.0 0.1 1.5707 0.0 0.0 /odom /base_link 100" />
	<node pkg="tf" type="static_transform_publisher" name="map_to_odom_tf" 
	    args="0.0 0.5 0.0 0.7853 0.0 0.0 /map /odom 100" />

</launch>